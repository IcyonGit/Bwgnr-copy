Counting Sort Algorithm
In this tutorial, you will learn about the counting sort algorithm and its implementation in Python, Java, C, and C++.

Counting sort is a sorting algorithm that sorts the elements of an array by counting the number of occurrences of each unique element in the array. The count is stored in an auxiliary array and the sorting is done by mapping the count as an index of the auxiliary array.

Working of Counting Sort
Find out the maximum element (let it be max) from the given array.
Counting Sort steps
Given array
Initialize an array of length max+1 with all elements 0. This array is used for storing the count of the elements in the array.
Counting Sort Step
Count array
Store the count of each element at their respective index in count array

For example: if the count of element 3 is 2 then, 2 is stored in the 3rd position of count array. If element "5" is not present in the array, then 0 is stored in 5th position.
Counting Sort Step
Count of each element stored
Store cumulative sum of the elements of the count array. It helps in placing the elements into the correct index of the sorted array.
Counting Sort Step
Cumulative count
Find the index of each element of the original array in the count array. This gives the cumulative count. Place the element at the index calculated as shown in figure below.
Counting Sort Steps
Counting sort
After placing each element at its correct position, decrease its count by one.
Counting Sort Algorithm
countingSort(array, size)
  max <- find largest element in array
  initialize count array with all zeros
  for j <- 0 to size
    find the total count of each unique element and 
    store the count at jth index in count array
  for i <- 1 to max
    find the cumulative sum and store it in count array itself
  for j <- size down to 1
    restore the elements to array
    decrease count of each element restored by 1