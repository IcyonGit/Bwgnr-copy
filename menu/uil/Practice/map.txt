Which of the following correctly 
replaces <*1> in the code to 
the right?
$
Map <*1> x = new TreeMap <*1>();
x.put("Grover",46);
x.put("Oscar", 37);
x.put("Grover",23);
x.put("Burt",7);
x.put("Oscar",102);
$
<Set<Integer>, String>
$
<String, Set<Integer>>
$
<Integer, String>
$
<String, Integer>
$
<String, Character>
$
D
$
What is returned by m.entrySet()?
$
Map<Integer, String> m =
    new TreeMap<Integer, String>();
$
A Set containing Map.Entry objects
$
A Set containing Integer objects
$
A Set containing String objects
$
An Iterator
$
A Map from Integer objects to 
String objects
$
A
$
What is output by the code
to the right?
$
TreeMap<String, String> translate;
translate = new TreeMap<String, String>();
translate.put("trivial", "easy");
translate.put("concat", "add");
translate.put("trivial", "simple");

for(Map.Entry<String, String> ent :
                   translate.entrySet()) {
   System.out.print( ent.getKey() + " ");
   String temp = ent.getValue();
   System.out.print ( temp + " " );
}
$
trivial simple concat add
$
concat add trivial simple
$
trivial easy simple can cat add
$
can cat add trivial easy simp
$
add concat easy simple trivial
$
B
$
What is output by the code
to the right?
$
char c;
Map<Character, Integer> m =
        new TreeMap<Character,Integer>();
String names = "ROB_BOB_BRAD_DAD_BROOD";

for(int i = 0; i < names.length(); i++){
  c = names.charAt(i);
  if( Character.isLetter(c) ){
    if( m.containsKey(c) )
      m.put( c, m.get(c) + 1 );
    else
      m.put( c, 1 );
  }
}

Set<Character> st = m.keySet();
for( Character k : st )
  System.out.print( m.get(k) );
$
254434
$
25443
$
ABDOR
$
34524
$
There is no output due
to a runtime error.
$
B
$
Suppose a user-defined class overrides the equals() method.
Which of these statements is true?
$

$
For HashMap to work correctly with objects of the new type as keys,
the class must override toString()
$
For HashMap to work correctly with objects of the new type as keys,
the class must override hashCode()
$
For TreeMap to work correctly with objects of the new type as keys,
the class must override toString()
$
For TreeMap to work correctly with objects of the new type as keys,
the class must override hashCode()
$
Both C and D
$
B
$
Which of the following could 
replace <*1> in the code to the
right so that the put() and get()
calls would run in constant time?
$
String wrd = "googlemoodle";
Map<Character, Integer> map;
map = <*1> 

for(int i=0; i < wrd.length(); i++) 
{ 
  char ch = wrd.charAt(i);
  Integer val = map.get(ch);
  if( val == null ) 
    map.put( ch, 0 ); 
  map.put( ch, map.get(ch) + 1 );
} 

out.println(map.size());     //1 
out.println(map.get('o'));   //2 
out.println(map.get('x'));   //3
$
new TreeMap<Character, Integer>();
$
new Map<Character, Integer>();
$
new HashMap<Character, Integer>();
$
A and B only
$
B and C only
$
C
$
Assuming that <*1> is filled correctly,
what is output by the line marked //1 
in the code to the right?
$
String wrd = "googlemoodle";
Map<Character, Integer> map;
map = <*1> 

for(int i=0; i < wrd.length(); i++) 
{ 
  char ch = wrd.charAt(i);
  Integer val = map.get(ch);
  if( val == null ) 
    map.put( ch, 0 ); 
  map.put( ch, map.get(ch) + 1 );
} 

out.println(map.size());     //1 
out.println(map.get('o'));   //2 
out.println(map.get('x'));   //3
$
5
$
6
$
7
$
8
$
9
$
B
$
Assuming that <*1> is filled correctly,
what is output by the line marked //2
in the code to the right?
$
String wrd = "googlemoodle";
Map<Character, Integer> map;
map = <*1> 

for(int i=0; i < wrd.length(); i++) 
{ 
  char ch = wrd.charAt(i);
  Integer val = map.get(ch);
  if( val == null ) 
    map.put( ch, 0 ); 
  map.put( ch, map.get(ch) + 1 );
} 

out.println(map.size());     //1 
out.println(map.get('o'));   //2 
out.println(map.get('x'));   //3
$
2
$
5
$
0
$
4
$
null
$
D
$
Assuming that <*1> is filled correctly,
what is output by the line marked //3
in the code to the right?
$
String wrd = "googlemoodle";
Map<Character, Integer> map;
map = <*1> 

for(int i=0; i < wrd.length(); i++) 
{ 
  char ch = wrd.charAt(i);
  Integer val = map.get(ch);
  if( val == null ) 
    map.put( ch, 0 ); 
  map.put( ch, map.get(ch) + 1 );
} 

out.println(map.size());     //1 
out.println(map.get('o'));   //2 
out.println(map.get('x'));   //3
$
2
$
5
$
0
$
4
$
null
$
E