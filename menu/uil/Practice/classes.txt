What replaces <*1> in the code to the right
so that the Pizza class inherits from the
Food class?
$
public class Food
{
   private int cost;

   public Food(int c) { 
     cost = c;
   }

   public int getCost() {
     return cost;
   }
}

public class Pizza <*1> Food {
  private int size;

  public Pizza(int cost, int sz) {
    super(cost);
    size = sz;
  }

  public String toString() {
    String result = "sz: " + size;
    result += ", cost: " + <*2>;
    return result;
  }
}
$
implements
$
inherits
$
final
$
static
$
extends
$
E
$
What replaces <*2> in the code to the right
to concatenate to result the value stored in 
the variable cost?

I. super.cost
II. super.getCost()
III. getCost()

$
public class Food
{
   private int cost;

   public Food(int c) { 
     cost = c;
   }

   public int getCost() {
     return cost;
   }
}

public class Pizza <*1> Food {
  private int size;

  public Pizza(int cost, int sz) {
    super(cost);
    size = sz;
  }

  public String toString() {
    String result = "sz: " + size;
    result += ", cost: " + <*2>;
    return result;
  }
}
$
I only
$
II only
$
III only
$
Both I and II
$
Both II and III
$
E
$
What replaces <*1> in the code to the
right so that other classes do not have
access to the instance variables freq
and letter?
$
public class Count {
  <*1> int freq;
  <*1> char letter;

  public Count(char let) {
    letter = let;
    freq = 0;
  }

  public String toString() {
    return letter + ":" + freq;
  }
}

////////////////////////////////////////
// client code
Count cl = new Count('A');
System.out.print ( cl );
$
public
$
private
$
public static
$
private static
$
private static final
$
B
$
What is output by the client code
to the right?
$
public class Count {
  <*1> int freq;
  <*1> char letter;

  public Count(char let) {
    letter = let;
    freq = 0;
  }

  public String toString() {
    return letter + ":" + freq;
  }
}

////////////////////////////////////////
// client code
Count cl = new Count('A');
System.out.print ( cl );
$
A:0
$
0:A
$
A0
$
65:0
$
The output cannot be
determined until runtime.
$
A
$
Consider the Person class and client
code to the right. What is output by
the statement marked line 1?
$
public class Person{
  private int height;
  private int weight;

  public Person() {
    this(70, 150);
  }

  public Person(int h) {
    height = h;
  }

  public Person(int h, int w) {
    height = h;
    weight = w;
  }

  public String toString() {
    return height + "_" + weight;
  }
}

////////////////////////////////////////
// client code
Person p1 = new Person();
System.out.println( p1 ); // line 1
Person p2 = new Person(54);
System.out.println( p2 ); // line 2
$
0_0
$
null_null
$
150_70
$
70_150
$
pl
$
D
$
Consider the Person class and client
code to the right. What is output by 
the statement marked line 2?
$
public class Person{
  private int height;
  private int weight;

  public Person() {
    this(70, 150);
  }

  public Person(int h) {
    height = h;
  }

  public Person(int h, int w) {
    height = h;
    weight = w;
  }

  public String toString() {
    return height + "_" + weight;
  }
}

//////////////////////////////////////////
// client code
Person p1 = new Person();
System.out.println( p1 ); // line 1
Person p2 = new Person(54);
System.out.println( p2 ); // line 2
$
0_0
$
p2
$
null_null
$
54_150
$
54_0
$
E
$
What replaces <*1> in the code to the
right so that MAX_PTS and PASS_RATE are
class constants that are accessible 
only in the Grade class?
$
public class Grade {
  <*1> int MAX_PTS = 100;
  <*1> double PASS_RATE = 0.7;

  private int points;

  public Grade(int p) {
    points = p;
  }

  public boolean pass() {
    double ave = 1.0 * points / MAX_PTS;
    return ave >= PASS_RATE;
  }
}

//////////////////////////////////////////
// client code
Grade hist = new Grade(75);
Grade cs = new Grade(105);
boolean result = hist.pass() && cs.pass();
System.out.print( result );
$
public final
$
private static
$
private final
$
private void final
$
private static final
$
E
$
What is output by the client code 
to the right?
$
public class Grade {
  <*1> int MAX_PTS = 100;
  <*1> double PASS_RATE = 0.7;

  private int points;

  public Grade(int p) {
    points = p;
  }

  public boolean pass() {
    double ave = 1.0 * points / MAX_PTS;
    return ave >= PASS_RATE;
  }
}

//////////////////////////////////////////
// client code
Grade hist = new Grade(75);
Grade cs = new Grade(105);
boolean result = hist.pass() && cs.pass();
System.out.print( result );
$
true
$
false
$
1
$
180
$
true true
$
A
$
What is output by the line marked line 1
in the client code to the right?
$
public class Timestamp {
  private static int myst = 0;
  private String day;
  private int hour;

  public Timestamp(String d) {
    this(d, 0);
    myst++;
  }
  public Timestamp(String d, int h) {
    day = d;
    hour = h;
    myst++;
  }

  public static int getMyst() {
    return myst;
  }

  public String toString() {
    return day + "_" + hour;
  }

  public static void reset() {
    myst = 0;
  }
}

//////////////////////////////////////////
// client code
Timestamp.reset();
Timestamp t1 = new Timestamp("Sun");
Timestamp t2 = new Timestamp("Mon", 3);
int tot = Timestamp.getMyst();
System.out.println( tot ); // line 1
System.out.println( t2 ); // line 2
$
3
$
4
$
2
$
1
$
0
$
A
$
What is output by the line marked line 2
in the client code to the right?
$
public class Timestamp {
  private static int myst = 0;
  private String day;
  private int hour;

  public Timestamp(String d) {
    this(d, 0);
    myst++;
  }
  public Timestamp(String d, int h) {
    day = d;
    hour = h;
    myst++;
  }

  public static int getMyst() {
    return myst;
  }

  public String toString() {
    return day + "_" + hour;
  }

  public static void reset() {
    myst = 0;
  }
}

//////////////////////////////////////////
// client code
Timestamp.reset();
Timestamp t1 = new Timestamp("Sun");
Timestamp t2 = new Timestamp("Mon", 3);
int tot = Timestamp.getMyst();
System.out.println( tot ); // line 1
System.out.println( t2 ); // line 2
$
Mon_Mon
$
Mon_3
$
Mon_2
$
1_3
$
Mon_0
$
B
$
How many constructors does the Table 
class have?
$
public class Furniture {
  private String name;

  public Furniture() {
    name = "blob";
  }
  
  public Furniture(String n) {
    name = n;
  }
  
  public String toString() {
    return name;
  }
}

public class Table extends Furniture {
  private int legs;

  public Table(int n) {
    super("Ikea");
    legs = n;
  }

  public String toString() {
    String result = super.toString();
    result += ", legs: " + legs;
    return result;
  }
}

//////////////////////////////////////////
// client code
Table endTable = new Table(4);
System.out.print( endTable );
$
2
$
0
$
4
$
1
$
3
$
D
$
What is output by the client code 
to the right?
$
public class Furniture {
  private String name;

  public Furniture() {
    name = "blob";
  }
  
  public Furniture(String n) {
    name = n;
  }
  
  public String toString() {
    return name;
  }
}

public class Table extends Furniture {
  private int legs;

  public Table(int n) {
    super("Ikea");
    legs = n;
  }

  public String toString() {
    String result = super.toString();
    result += ", legs: " + legs;
    return result;
  }
}

//////////////////////////////////////////
// client code
Table endTable = new Table(4);
System.out.print( endTable );
$
null, legs: 0
$
, legs: 4
$
Ikea, legs: 4
$
blob, legs: 4
$
Ikea, legs: 0
$
C
$
What replaces <*1> in the code to the
right so that the instance variable side
can only be accessed by the Square class?
$
public class Square {
  <*1> int side;

  public Square(int s) {
    side = s;
  }

  public void grow() {
    side++;
  }

  public int getArea() {
    return side * side;
  }
}
/////////////////////////////////////////
//client code
Square sq = new Square(2);
sq.grow();
System.out.print( sq.getArea() );
$
public
$
private
$
protected
$
package
$
only
$
B
$
What is output by the client code 
to the right?
$
public class Square {
  <*1> int side;

  public Square(int s) {
    side = s;
  }

  public void grow() {
    side++;
  }

  public int getArea() {
    return side * side;
  }
}
/////////////////////////////////////////
//client code
Square sq = new Square(2);
sq.grow();
System.out.print( sq.getArea() );
$
4
$
2
$
9
$
0
$
1
$
C
$
What replaces <*1> in the code to 
the right to indicate that the method
takeTrip does not return a value?
$
public class Car {
  private int miles;

  public Car(int m) {
    miles = m;
  }

  public <*1> takeTrip(int len) {
    miles += len;
  }

  public int getDistance() {
    return miles;
  }
}
$
return
$
null
$
static
$
private
$
void
$
E
$
Which of the following creates a Car 
object whose miles instance variable
is initialized to zero?
$
public class Car {
  private int miles;

  public Car(int m) {
    miles = m;
  }

  public <*1> takeTrip(int len) {
    miles += len;
  }

  public int getDistance() {
    return miles;
  }
}
$
Car c = new Car("0");
$
Car c = new Car('0');
$
Car c = new Car(0);
$
Car c = new Car(miles.0);
$
Car c = new Car("zero");
$
C
$
What replaces <*1> in the code to 
the right so that the method longSong
is accessible to code in all classes?
$
public class Song {
  private String name;
  private int lengthInSeconds;
  
  public Song(String nm, int len) {
    name = nm;
    lengthInSeconds = len;
  }

  <*1> boolean longSong() {
    <*2>
  }
}
$
private
$
String
$
void
$
public
$
java.lang
$
D
$
What replaces <*2> in the code to the 
right so the method longSong returns 
true only if the instance variable
lengthInSeconds is greater than 180?
$
public class Song {
  private String name;
  private int lengthInSeconds;
  
  public Song(String nm, int len) {
    name = nm;
    lengthInSeconds = len;
  }

  <*1> boolean longSong() {
    <*2>
  }
}
$
if( lengthInSeconds > 180 )
  return true;
else
  return false;
$
if( lengthInSeconds != 180 )
  return true;
else
  return false;
$
return lengthInSeconds > 180;
$
180.equals( lengthInSeconds );
$
More than one of these.
$
E
$
How may constructors does the class
Book have?
$
public class Book {
  private String title;
  private int pages;

  public Book(String t) {
   title = t;
  }

  public Book(String t, int len) {
    title = t;
    pages = len;
  }

  public boolean longBook() {
    return pages > 250;
  }  
}
//////////////////////////////////////////
// client code
Book bk = new Book("Blink", 200);
System.out.print( bk.longBook() );
$
1
$
2
$
3
$
4
$
5
$
B
$
What is output by the client code 
to the right?
$
public class Book {
  private String title;
  private int pages;

  public Book(String t) {
   title = t;
  }

  public Book(String t, int len) {
    title = t;
    pages = len;
  }

  public boolean longBook() {
    return pages > 250;
  }  
}
//////////////////////////////////////////
// client code
Book bk = new Book("Blink", 200);
System.out.print( bk.longBook() );
$
false
$
true
$
Blink
$
200
$
Blink:true
$
A
$
What replaces <*1> in the code to the
right so that DEFAULT_SIDES is a class
constant that is accessible in all 
other classes?
$
public class NumberDie {
  <*1> int DEFAULT_SIDES = 6;

  private int sides;

  public NumberDie() {
    sides = DEFAULT_SIDES;
  }

  public NumberDie(int s) {
    sides = s;
  }

  public int getSides() {
    return sides;
  }
}
//////////////////////////////////////////
// client code
NumberDie d = new NumberDie();
System.out.print( d.getSides() );
$
public final
$
static final
$
public static
$
public static final
$
public static final void
$
D
$
What is output by the client code 
to the right?
$
public class NumberDie {
  <*1> int DEFAULT_SIDES = 6;

  private int sides;

  public NumberDie() {
    sides = DEFAULT_SIDES;
  }

  public NumberDie(int s) {
    sides = s;
  }

  public int getSides() {
    return sides;
  }
}
//////////////////////////////////////////
// client code
NumberDie d = new NumberDie();
System.out.print( d.getSides() );
$
0
$
d
$
s
$
5
$
6
$
E
$
What is output by the client code
to the right?
$
public class Record {
  private int wins;
  private int losses;

  public void won() {
    <*1>;
  }

  public void lost() {
    losses++;
  }

  public double ave() {
    int total = wins + losses;
    return (double)wins / total;
  }
}
//////////////////////////////////////////
// client code
Record rec = new Record();
rec.lost();
System.out.print( rec.ave() );
$
++wins
$
won()
$
this.wins++
$
wins.inc()
$
More than one of these.
$
E Answers A and C are both correct.
$
What is output by the client code
to the right?
$
public class Record {
  private int wins;
  private int losses;

  public void won() {
    <*1>;
  }

  public void lost() {
    losses++;
  }

  public double ave() {
    int total = wins + losses;
    return (double)wins / total;
  }
}
//////////////////////////////////////////
// client code
Record rec = new Record();
rec.lost();
System.out.print( rec.ave() );
$
0
$
NaN
$
0.0
$
There is no output due to a syntax
error in the client code.
$
There is no output due to a runtime
error that occurs when the client 
code is executed.
$
C
$
Which class is Rectangle's super class?
$
public class Rectangle {
  private int width;
  private int height;

  public Rectangle(int w, int h) {
    width = w;
    height = h;
  }

  public int area() {
    return width * height;
  }

  public String toString() {
    return "" + this.area();
  }
}

// client code
Rectangle r1 = new Rectangle( 2, 3 );
System.out.println( r1 );
$
Shape
$
Object
$
Square
$
String
$
Rectangle does not have
a super class.
$
B
$
What is output by the client code 
to the right?
$
public class Rectangle {
  private int width;
  private int height;

  public Rectangle(int w, int h) {
    width = w;
    height = h;
  }

  public int area() {
    return width * height;
  }

  public String toString() {
    return "" + this.area();
  }
}

// client code
Rectangle r1 = new Rectangle( 2, 3 );
System.out.println( r1 );
$
r1
$
this
$
6
$
0
$
The output cannot be determined
until the program is run.
$
C